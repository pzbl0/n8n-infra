{
  "name": "transcribe-media - v1.2",
  "nodes": [
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "80d8e8e6-5809-4ed7-9e9b-aa3fc62520d1",
                    "leftValue": "={{ $json.media_type }}",
                    "rightValue": "audio",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a3ff7ac1-f0ba-4088-b891-25d18b2a33ab",
                    "leftValue": "={{ $json.media_type }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cb8d92e2-0bfa-4937-9ecd-d889ab15f6e1",
                    "leftValue": "={{ $json.media_type }}",
                    "rightValue": "file",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "File"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "text"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -656,
        352
      ],
      "id": "a8591c24-0f74-4ead-b66c-851f41673331",
      "name": "Content type"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -208,
        0
      ],
      "id": "34cfa506-14c8-4eb0-a8bc-37e2dc4d3d97",
      "name": "Audio transcriber",
      "credentials": {
        "openAiApi": {
          "id": "leOLHYOtXey0DgzA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "inputType": "base64",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -208,
        192
      ],
      "id": "0f066d61-2148-4da8-82b1-0565f8251015",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "leOLHYOtXey0DgzA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9f77c6a0-d2e5-4522-855f-f0f3d3db6d39",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -432,
        672
      ],
      "id": "bb80ae5a-25b2-4f3d-a2f3-7cafb22fabe7",
      "name": "Get text"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f8902392-9dc9-4f23-af29-74f9e323a7da",
              "name": "text",
              "value": "=Audio converted to text:\n{{ $json.text }}\n\nText:\n{{ $('When Executed by Another Workflow').item.json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        16,
        0
      ],
      "id": "d401a9ae-a745-478e-acc0-bb56cb8dfc37",
      "name": "Get text from audio"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "18e6bbe0-8c2a-409a-b2fa-c07a0f8b90b5",
              "name": "text",
              "value": "=Image converted to text:\n{{ $json.content }}\n\nText:\n{{ $('When Executed by Another Workflow').item.json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        16,
        192
      ],
      "id": "a6eb3479-c458-4c3e-9ded-9fc8e08c8864",
      "name": "Get text from image"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "text"
            },
            {
              "name": "media_type"
            },
            {
              "name": "media_url"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -880,
        384
      ],
      "id": "65dbcb2e-94b5-4826-8f66-9aa1ef78ffa4",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "url": "={{ $json.media_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -432,
        0
      ],
      "id": "666e08a4-334a-4473-a62b-c161fd065ed4",
      "name": "Download audio"
    },
    {
      "parameters": {
        "url": "={{ $json.media_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -432,
        192
      ],
      "id": "4fbcaa47-6704-4c14-8921-73a97733f5f1",
      "name": "Download image"
    },
    {
      "parameters": {
        "url": "={{ $json.media_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        16,
        384
      ],
      "id": "fa8d25c2-02dc-4cb1-afd0-8905c0089100",
      "name": "Download file"
    },
    {
      "parameters": {
        "jsCode": "// Get the input items\nconst items = $input.all();\n\n// Process each item\nreturn items.map(item => {\n  // Safely access media_url with fallback\n  const url = item?.json?.media_url;\n  \n  // Extract extension only if url exists\n  const extension = url ? url.split('.').pop()?.split('?')[0] : null;\n  \n  // Return the original item with the new extension field\n  return {\n    json: {\n      ...item.json,\n      file_extension: extension || 'unknown' // Fallback if extension is null\n    }\n  };\n});"
      },
      "id": "002b9a74-0967-480f-af48-b4697531c187",
      "name": "Extract file extension",
      "type": "n8n-nodes-base.code",
      "position": [
        -432,
        480
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.file_extension }}",
                    "rightValue": "pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "edc87861-0e56-4190-9a96-622b90c12bb7"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -208,
        480
      ],
      "id": "1f3acc11-6876-42c6-afb6-719499f5dd02",
      "name": "Switch"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.ocr.space/parse/image",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "K83007227088957"
            },
            {
              "name": "language",
              "value": "spa"
            },
            {
              "name": "isOverlayRequired",
              "value": "false"
            },
            {
              "name": "OCREngine",
              "value": "2"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        384
      ],
      "id": "ac736b38-0f03-43dd-a238-a5c3eb78c833",
      "name": "ocr.space"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "18e6bbe0-8c2a-409a-b2fa-c07a0f8b90b5",
              "name": "text",
              "value": "=File converted to text:\n{{ $json.ParsedResults[0].ParsedText }}\n\nText:\n{{ $('When Executed by Another Workflow').item.json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        464,
        384
      ],
      "id": "0c60f23b-c933-4cbd-a190-b054c1ce6fc3",
      "name": "Get text from pdf"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "18e6bbe0-8c2a-409a-b2fa-c07a0f8b90b5",
              "name": "text",
              "value": "=File shared:\n\"It is not possible to see this type of files.\"\n\nText:\n{{ $('When Executed by Another Workflow').item.json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        16,
        576
      ],
      "id": "9034b8f4-1cac-469e-bd54-9db68ff7a1ff",
      "name": "Get text1"
    }
  ],
  "connections": {
    "Content type": {
      "main": [
        [
          {
            "node": "Download audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download image",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract file extension",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Audio transcriber": {
      "main": [
        [
          {
            "node": "Get text from audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Get text from image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Content type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download audio": {
      "main": [
        [
          {
            "node": "Audio transcriber",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download image": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download file": {
      "main": [
        [
          {
            "node": "ocr.space",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract file extension": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get text1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ocr.space": {
      "main": [
        [
          {
            "node": "Get text from pdf",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}